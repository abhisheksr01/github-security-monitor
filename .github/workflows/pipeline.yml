name: CICD Pipeline
on:
  push:
    branches:
      - main
  pull_request:
    branches:
      - main

jobs:
  conventional-commit-check:
    runs-on: ubuntu-latest
    steps:
      - uses: actions/checkout@v4
        with:
          fetch-depth: 0
      - name: Conventional commit check
        uses: cocogitto/cocogitto-action@v3
  test:
    runs-on: ubuntu-latest
    needs: conventional-commit-check
    steps:
      - uses: actions/checkout@v4
      - uses: actions/setup-node@v4
        with:
          node-version: 23
          cache: 'npm'
      - name: Install Dependencies
        run: npm ci
      - name: Run Unit Test
        run: npm run test:unit
      - name: Run E2E Test
        run: npm run test:e2e
      - name: Run CucumberJS BDD Test
        run: npm run test:bdd
      - uses: actions/upload-artifact@v4
        with:
          name: test-reports
          path: reports
  sast-dependency-code:
    runs-on: ubuntu-latest
    needs: conventional-commit-check
    steps:
      - uses: actions/checkout@v4
      - uses: actions/setup-node@v4
        with:
          node-version: 23
          cache: 'npm'
      - name: Install Dependencies
        run: npm ci
      - name: Run lint
        run: npm run lint
      - name: Scan dependencies for vulnerabilities
        run: npm audit
      - uses: snyk/actions/setup@master
      - name: Snyk SAST code
        run: snyk code test
        env:
          SNYK_TOKEN: ${{ secrets.SNYK_TOKEN }}
  sast-dockerfile:
    runs-on: ubuntu-latest
    needs: conventional-commit-check
    steps:
      - uses: actions/checkout@v4
      - uses: hadolint/hadolint-action@v3.1.0
        with:
          dockerfile: Dockerfile
          failure-threshold: error
      - name: Run Trivy vulnerability for Dockerfile
        uses: aquasecurity/trivy-action@0.29.0
        with:
          scan-type: config
          scan-ref: './'
          exit-code: 1
          trivy-config: ./config/trivy/trivy.yaml
  docker-build-push:
    if: github.ref == 'refs/heads/main'
    runs-on: ubuntu-latest
    needs:
      - test
      - sast-dependency-code
      - sast-dockerfile
    outputs:
      is-dryrun-version-bumped: ${{ steps.bump-version.outputs.is-dryrun-version-bumped }}
    steps:
      - uses: actions/checkout@v4
        with:
          fetch-depth: 0
      - name: fetch-tags
        run: git fetch --tags origin
        shell: bash
      - id: bump-version
        uses: abhisheksr01/github-actions/cog-bump@v0.2.0
        with:
          dry-run: true # Since we are setting dryrun argument the bump-version will always be available until 'current-version' is pushed as release
          version: 0.1.0
      - name: check-bump-version-output
        run: |
          echo "previous-version: ${{ steps.bump-version.outputs.previous-version }}"
          echo "bump-version: ${{ steps.bump-version.outputs.bump-version }}"
          echo "current-version: ${{ steps.bump-version.outputs.current-version }}"
          echo "is-version-bumped: ${{ steps.bump-version.outputs.is-version-bumped }}"
          echo "is-dryrun-version-bumped: ${{ steps.bump-version.outputs.is-dryrun-version-bumped }}"
        shell: bash
      - name: Login to Docker Hub
        uses: docker/login-action@v3
        with:
          username: ${{ vars.DOCKERHUB_USERNAME }}
          password: ${{ secrets.DOCKERHUB_TOKEN }}
      - name: Set up Docker Buildx
        uses: docker/setup-buildx-action@v3
      - name: Docker meta
        if: ${{ steps.bump-version.outputs.is-dryrun-version-bumped == 'true' }}
        id: meta
        uses: docker/metadata-action@v5
        with:
          images: abhisheksr01/github-security-monitor
          context: git
          tags: |
            type=ref,event=pr
            type=semver,pattern={{version}},prefix=v,value=${{ steps.bump-version.outputs.bump-version }}
          labels: |
            "org.opencontainers.image.title": "abhisheksr01/github-security-monitor",
            "org.opencontainers.image.description": "This API generates alerts based on github webhook security alerts.",
            "org.opencontainers.image.url": "https://github.com/abhisheksr01/github-security-monitor",
            "org.opencontainers.image.source": "https://github.com/abhisheksr01/github-security-monitor",
            "org.opencontainers.image.version": ${{ steps.bump-version.outputs.bump-version }},
            "org.opencontainers.image.created": "2020-01-10T00:30:00.000Z",
            "org.opencontainers.image.revision": ${{ github.sha }},
            "org.opencontainers.image.licenses": "MIT"
      - name: Build and push
        if: ${{ steps.bump-version.outputs.is-dryrun-version-bumped == 'true' }}
        uses: docker/build-push-action@v6
        with:
          push: ${{ github.event_name != 'pull_request' && steps.bump-version.outputs.is-dryrun-version-bumped == 'true' }} # Only push on main branch & when version is bumped with dryrun. We will create tags and creates separately after proper testing
          tags: ${{ steps.meta.outputs.tags }}
          labels: ${{ steps.meta.outputs.labels }}
          sbom: true
          provenance: true
  create-release:
    if: ${{ needs.docker-build-push.outputs.is-dryrun-version-bumped  == 'true' }} # Only release when new version is available
    runs-on: ubuntu-latest
    permissions:
      contents: write # to be able to publish a GitHub release
    needs:
      - docker-build-push
    environment:
      name: approve-release # Manual Approval to decide if we are ready to push tags and release
    steps:
      - uses: actions/checkout@v4
        with:
          fetch-depth: 0
          fetch-tags: true
      - uses: abhisheksr01/github-actions/cog-bump@v0.2.0 # Publishing the tags
        id: bump-tag-version
      - name: Generate changelog
        run: cog changelog --at v${{ steps.bump-tag-version.outputs.current-version }} -t full_hash > CHANGELOG.md
      - run: |
          set -euo pipefail
          echo "Creating release from tag $tag"
          gh release create "$tag" \
              --title="$tag" \
              --repo="$GITHUB_REPOSITORY" \
              --notes-file CHANGELOG.md
        env:
          tag: v${{ steps.bump-tag-version.outputs.current-version }}
          GITHUB_TOKEN: ${{ secrets.GITHUB_TOKEN }}
